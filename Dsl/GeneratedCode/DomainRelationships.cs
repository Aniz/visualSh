//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ufba.vShome
{
	/// <summary>
	/// DomainRelationship FeatureReferencesActuator
	/// Description for Ufba.vShome.FeatureReferencesActuator
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesActuator.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesActuator.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("dfb7297c-d2e3-432b-b512-9aaa9da28427")]
	public partial class FeatureReferencesActuator : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureReferencesActuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdfb7297c, 0xd2e3, 0x432b, 0xb5, 0x12, 0x9a, 0xaa, 0x9d, 0xa2, 0x84, 0x27);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureReferencesActuator link in the same Partition as the given Feature
		/// </summary>
		/// <param name="source">Feature to use as the source of the relationship.</param>
		/// <param name="target">Device to use as the target of the relationship.</param>
		public FeatureReferencesActuator(Feature source, Device target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureReferencesActuator.FeatureDomainRoleId, source), new DslModeling::RoleAssignment(FeatureReferencesActuator.DeviceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesActuator(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesActuator(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesActuator(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesActuator(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Feature domain role code
		
		/// <summary>
		/// Feature domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureDomainRoleId = new global::System.Guid(0xbb42e52d, 0xa5bb, 0x4dcd, 0x97, 0x54, 0x16, 0x53, 0x80, 0x46, 0x91, 0xc5);
		
		/// <summary>
		/// DomainRole Feature
		/// Description for Ufba.vShome.FeatureReferencesActuator.Feature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesActuator/Feature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesActuator/Feature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actuator", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesActuator/Feature.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bb42e52d-a5bb-4dcd-9754-1653804691c5")]
		public virtual Feature Feature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Feature)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access hasActuator of a Device
		/// <summary>
		/// Gets a list of hasActuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Feature> GethasActuator(Device element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(element, DeviceDomainRoleId);
		}
		#endregion
		#region Device domain role code
		
		/// <summary>
		/// Device domain role Id.
		/// </summary>
		public static readonly global::System.Guid DeviceDomainRoleId = new global::System.Guid(0x5607b205, 0x4164, 0x4271, 0xa3, 0xd4, 0xaf, 0xab, 0xb8, 0xbf, 0x3f, 0x14);
		
		/// <summary>
		/// DomainRole Device
		/// Description for Ufba.vShome.FeatureReferencesActuator.Device
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesActuator/Device.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesActuator/Device.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "hasActuator", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesActuator/Device.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5607b205-4164-4271-a3d4-afabb8bf3f14")]
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Device)DslModeling::DomainRoleInfo.GetRolePlayer(this, DeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actuator of a Feature
		/// <summary>
		/// Gets Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Device GetActuator(Feature element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FeatureDomainRoleId) as Device;
		}
		
		/// <summary>
		/// Sets Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetActuator(Feature element, Device newDevice)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FeatureDomainRoleId, newDevice);
		}
		#endregion
		#region Feature link accessor
		/// <summary>
		/// Get the FeatureReferencesActuator link to a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.FeatureReferencesActuator GetLinkToActuator (global::Ufba.vShome.Feature featureInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesActuator>(featureInstance, global::Ufba.vShome.FeatureReferencesActuator.FeatureDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Feature not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Device link accessor
		/// <summary>
		/// Get the list of FeatureReferencesActuator links to a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesActuator> GetLinksTohasActuator ( global::Ufba.vShome.Device deviceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesActuator>(deviceInstance, global::Ufba.vShome.FeatureReferencesActuator.DeviceDomainRoleId);
		}
		#endregion
		#region FeatureReferencesActuator instance accessors
		
		/// <summary>
		/// Get any FeatureReferencesActuator links between a given Feature and a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesActuator> GetLinks( global::Ufba.vShome.Feature source, global::Ufba.vShome.Device target )
		{
			global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesActuator> outLinks = new global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesActuator>();
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesActuator>(source, global::Ufba.vShome.FeatureReferencesActuator.FeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesActuator link in links )
			{
				if ( target.Equals(link.Device) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureReferencesActuator link between a given Featureand a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.FeatureReferencesActuator GetLink( global::Ufba.vShome.Feature source, global::Ufba.vShome.Device target )
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesActuator>(source, global::Ufba.vShome.FeatureReferencesActuator.FeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesActuator link in links )
			{
				if ( target.Equals(link.Device) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.vShome
{
	/// <summary>
	/// DomainRelationship FeatureReferencesFather
	/// Description for Ufba.vShome.FeatureReferencesFather
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesFather.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesFather.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("dcbd29f2-8276-4933-a867-20d63709fe2d")]
	public partial class FeatureReferencesFather : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureReferencesFather domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdcbd29f2, 0x8276, 0x4933, 0xa8, 0x67, 0x20, 0xd6, 0x37, 0x09, 0xfe, 0x2d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureReferencesFather link in the same Partition as the given Feature
		/// </summary>
		/// <param name="source">Feature to use as the source of the relationship.</param>
		/// <param name="target">Feature to use as the target of the relationship.</param>
		public FeatureReferencesFather(Feature source, Feature target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureReferencesFather.SourceFeatureDomainRoleId, source), new DslModeling::RoleAssignment(FeatureReferencesFather.TargetFeatureDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesFather(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesFather(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesFather(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesFather(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceFeature domain role code
		
		/// <summary>
		/// SourceFeature domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceFeatureDomainRoleId = new global::System.Guid(0x67617821, 0xbdfb, 0x4ec0, 0xa5, 0x48, 0x7f, 0xdb, 0xe2, 0x32, 0x56, 0x6a);
		
		/// <summary>
		/// DomainRole SourceFeature
		/// Description for Ufba.vShome.FeatureReferencesFather.SourceFeature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesFather/SourceFeature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesFather/SourceFeature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Father", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesFather/SourceFeature.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("67617821-bdfb-4ec0-a548-7fdbe232566a")]
		public virtual Feature SourceFeature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Feature)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceFeatureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceFeatureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access hasFather of a Feature
		/// <summary>
		/// Gets a list of hasFather.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Feature> GethasFather(Feature element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(element, TargetFeatureDomainRoleId);
		}
		#endregion
		#region TargetFeature domain role code
		
		/// <summary>
		/// TargetFeature domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetFeatureDomainRoleId = new global::System.Guid(0x5626c3e6, 0x3f86, 0x40a1, 0x9a, 0x27, 0x06, 0xee, 0xe0, 0x35, 0x94, 0x75);
		
		/// <summary>
		/// DomainRole TargetFeature
		/// Description for Ufba.vShome.FeatureReferencesFather.TargetFeature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesFather/TargetFeature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesFather/TargetFeature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "hasFather", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesFather/TargetFeature.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5626c3e6-3f86-40a1-9a27-06eee0359475")]
		public virtual Feature TargetFeature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Feature)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetFeatureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetFeatureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Father of a Feature
		/// <summary>
		/// Gets Father.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Feature GetFather(Feature element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceFeatureDomainRoleId) as Feature;
		}
		
		/// <summary>
		/// Sets Father.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFather(Feature element, Feature newTargetFeature)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceFeatureDomainRoleId, newTargetFeature);
		}
		#endregion
		#region SourceFeature link accessor
		/// <summary>
		/// Get the FeatureReferencesFather link to a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.FeatureReferencesFather GetLinkToFather (global::Ufba.vShome.Feature sourceFeatureInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesFather> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesFather>(sourceFeatureInstance, global::Ufba.vShome.FeatureReferencesFather.SourceFeatureDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceFeature not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetFeature link accessor
		/// <summary>
		/// Get the list of FeatureReferencesFather links to a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesFather> GetLinksTohasFather ( global::Ufba.vShome.Feature targetFeatureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesFather>(targetFeatureInstance, global::Ufba.vShome.FeatureReferencesFather.TargetFeatureDomainRoleId);
		}
		#endregion
		#region FeatureReferencesFather instance accessors
		
		/// <summary>
		/// Get any FeatureReferencesFather links between a given Feature and a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesFather> GetLinks( global::Ufba.vShome.Feature source, global::Ufba.vShome.Feature target )
		{
			global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesFather> outLinks = new global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesFather>();
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesFather> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesFather>(source, global::Ufba.vShome.FeatureReferencesFather.SourceFeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesFather link in links )
			{
				if ( target.Equals(link.TargetFeature) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureReferencesFather link between a given Featureand a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.FeatureReferencesFather GetLink( global::Ufba.vShome.Feature source, global::Ufba.vShome.Feature target )
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesFather> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesFather>(source, global::Ufba.vShome.FeatureReferencesFather.SourceFeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesFather link in links )
			{
				if ( target.Equals(link.TargetFeature) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.vShome
{
	/// <summary>
	/// DomainRelationship ModelRootHasFeatures
	/// Description for Ufba.vShome.ModelRootHasFeatures
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.ModelRootHasFeatures.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.ModelRootHasFeatures.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a6b34994-962e-4bfc-9e18-0c82c81cb28e")]
	public partial class ModelRootHasFeatures : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasFeatures domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6b34994, 0x962e, 0x4bfc, 0x9e, 0x18, 0x0c, 0x82, 0xc8, 0x1c, 0xb2, 0x8e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasFeatures link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Feature to use as the target of the relationship.</param>
		public ModelRootHasFeatures(ModelRoot source, Feature target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasFeatures.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasFeatures.FeatureDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasFeatures(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasFeatures(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasFeatures(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasFeatures(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xb3f0b4aa, 0xb58b, 0x4921, 0xb5, 0xc0, 0x46, 0xe0, 0x64, 0x07, 0xa4, 0x35);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for Ufba.vShome.ModelRootHasFeatures.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.ModelRootHasFeatures/ModelRoot.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.ModelRootHasFeatures/ModelRoot.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Features", PropertyDisplayNameKey="Ufba.vShome.ModelRootHasFeatures/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b3f0b4aa-b58b-4921-b5c0-46e06407a435")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Feature
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Feature element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FeatureDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Feature element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FeatureDomainRoleId, newModelRoot);
		}
		#endregion
		#region Feature domain role code
		
		/// <summary>
		/// Feature domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureDomainRoleId = new global::System.Guid(0x203c8b11, 0xa52d, 0x4de2, 0x96, 0x5b, 0x3c, 0x44, 0x6b, 0x16, 0x15, 0x09);
		
		/// <summary>
		/// DomainRole Feature
		/// Description for Ufba.vShome.ModelRootHasFeatures.Feature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.ModelRootHasFeatures/Feature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.ModelRootHasFeatures/Feature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Ufba.vShome.ModelRootHasFeatures/Feature.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("203c8b11-a52d-4de2-965b-3c446b161509")]
		public virtual Feature Feature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Feature)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Features of a ModelRoot
		/// <summary>
		/// Gets a list of Features.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Feature> GetFeatures(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasFeatures links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.ModelRootHasFeatures> GetLinksToFeatures ( global::Ufba.vShome.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.ModelRootHasFeatures>(modelRootInstance, global::Ufba.vShome.ModelRootHasFeatures.ModelRootDomainRoleId);
		}
		#endregion
		#region Feature link accessor
		/// <summary>
		/// Get the ModelRootHasFeatures link to a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.ModelRootHasFeatures GetLinkToModelRoot (global::Ufba.vShome.Feature featureInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.ModelRootHasFeatures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.ModelRootHasFeatures>(featureInstance, global::Ufba.vShome.ModelRootHasFeatures.FeatureDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Feature not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasFeatures instance accessors
		
		/// <summary>
		/// Get any ModelRootHasFeatures links between a given ModelRoot and a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.ModelRootHasFeatures> GetLinks( global::Ufba.vShome.ModelRoot source, global::Ufba.vShome.Feature target )
		{
			global::System.Collections.Generic.List<global::Ufba.vShome.ModelRootHasFeatures> outLinks = new global::System.Collections.Generic.List<global::Ufba.vShome.ModelRootHasFeatures>();
			global::System.Collections.Generic.IList<global::Ufba.vShome.ModelRootHasFeatures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.ModelRootHasFeatures>(source, global::Ufba.vShome.ModelRootHasFeatures.ModelRootDomainRoleId);
			foreach ( global::Ufba.vShome.ModelRootHasFeatures link in links )
			{
				if ( target.Equals(link.Feature) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasFeatures link between a given ModelRootand a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.ModelRootHasFeatures GetLink( global::Ufba.vShome.ModelRoot source, global::Ufba.vShome.Feature target )
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.ModelRootHasFeatures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.ModelRootHasFeatures>(source, global::Ufba.vShome.ModelRootHasFeatures.ModelRootDomainRoleId);
			foreach ( global::Ufba.vShome.ModelRootHasFeatures link in links )
			{
				if ( target.Equals(link.Feature) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.vShome
{
	/// <summary>
	/// DomainRelationship ModelRootHasDevices
	/// Description for Ufba.vShome.ModelRootHasDevices
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.ModelRootHasDevices.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.ModelRootHasDevices.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("51d10c02-9aff-46ed-b806-b4f79ce1cc41")]
	public partial class ModelRootHasDevices : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasDevices domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x51d10c02, 0x9aff, 0x46ed, 0xb8, 0x06, 0xb4, 0xf7, 0x9c, 0xe1, 0xcc, 0x41);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasDevices link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Device to use as the target of the relationship.</param>
		public ModelRootHasDevices(ModelRoot source, Device target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasDevices.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasDevices.DeviceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasDevices(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasDevices(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasDevices(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasDevices(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x017d4f36, 0x3848, 0x4b38, 0x8d, 0x77, 0xef, 0x85, 0x15, 0x9c, 0xe5, 0xd0);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for Ufba.vShome.ModelRootHasDevices.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.ModelRootHasDevices/ModelRoot.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.ModelRootHasDevices/ModelRoot.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Devices", PropertyDisplayNameKey="Ufba.vShome.ModelRootHasDevices/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("017d4f36-3848-4b38-8d77-ef85159ce5d0")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Device
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Device element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DeviceDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Device element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DeviceDomainRoleId, newModelRoot);
		}
		#endregion
		#region Device domain role code
		
		/// <summary>
		/// Device domain role Id.
		/// </summary>
		public static readonly global::System.Guid DeviceDomainRoleId = new global::System.Guid(0xbab86b87, 0x7341, 0x4a7a, 0x97, 0x57, 0xd9, 0xb3, 0xdc, 0xa0, 0xc3, 0xb3);
		
		/// <summary>
		/// DomainRole Device
		/// Description for Ufba.vShome.ModelRootHasDevices.Device
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.ModelRootHasDevices/Device.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.ModelRootHasDevices/Device.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Ufba.vShome.ModelRootHasDevices/Device.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bab86b87-7341-4a7a-9757-d9b3dca0c3b3")]
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Device)DslModeling::DomainRoleInfo.GetRolePlayer(this, DeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Devices of a ModelRoot
		/// <summary>
		/// Gets a list of Devices.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Device> GetDevices(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Device>, Device>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasDevices links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.ModelRootHasDevices> GetLinksToDevices ( global::Ufba.vShome.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.ModelRootHasDevices>(modelRootInstance, global::Ufba.vShome.ModelRootHasDevices.ModelRootDomainRoleId);
		}
		#endregion
		#region Device link accessor
		/// <summary>
		/// Get the ModelRootHasDevices link to a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.ModelRootHasDevices GetLinkToModelRoot (global::Ufba.vShome.Device deviceInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.ModelRootHasDevices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.ModelRootHasDevices>(deviceInstance, global::Ufba.vShome.ModelRootHasDevices.DeviceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Device not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasDevices instance accessors
		
		/// <summary>
		/// Get any ModelRootHasDevices links between a given ModelRoot and a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.ModelRootHasDevices> GetLinks( global::Ufba.vShome.ModelRoot source, global::Ufba.vShome.Device target )
		{
			global::System.Collections.Generic.List<global::Ufba.vShome.ModelRootHasDevices> outLinks = new global::System.Collections.Generic.List<global::Ufba.vShome.ModelRootHasDevices>();
			global::System.Collections.Generic.IList<global::Ufba.vShome.ModelRootHasDevices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.ModelRootHasDevices>(source, global::Ufba.vShome.ModelRootHasDevices.ModelRootDomainRoleId);
			foreach ( global::Ufba.vShome.ModelRootHasDevices link in links )
			{
				if ( target.Equals(link.Device) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasDevices link between a given ModelRootand a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.ModelRootHasDevices GetLink( global::Ufba.vShome.ModelRoot source, global::Ufba.vShome.Device target )
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.ModelRootHasDevices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.ModelRootHasDevices>(source, global::Ufba.vShome.ModelRootHasDevices.ModelRootDomainRoleId);
			foreach ( global::Ufba.vShome.ModelRootHasDevices link in links )
			{
				if ( target.Equals(link.Device) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.vShome
{
	/// <summary>
	/// DomainRelationship FeatureReferencesSensor
	/// Description for Ufba.vShome.FeatureReferencesSensor
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesSensor.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesSensor.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0580a3cb-5fa1-49a7-9e7c-3cf1b64b1628")]
	public partial class FeatureReferencesSensor : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureReferencesSensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0580a3cb, 0x5fa1, 0x49a7, 0x9e, 0x7c, 0x3c, 0xf1, 0xb6, 0x4b, 0x16, 0x28);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureReferencesSensor link in the same Partition as the given Feature
		/// </summary>
		/// <param name="source">Feature to use as the source of the relationship.</param>
		/// <param name="target">Device to use as the target of the relationship.</param>
		public FeatureReferencesSensor(Feature source, Device target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureReferencesSensor.FeatureDomainRoleId, source), new DslModeling::RoleAssignment(FeatureReferencesSensor.DeviceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesSensor(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesSensor(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesSensor(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesSensor(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Feature domain role code
		
		/// <summary>
		/// Feature domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureDomainRoleId = new global::System.Guid(0xf72fdf3b, 0x2f74, 0x4a7a, 0xa3, 0xd2, 0x54, 0xee, 0xa7, 0x32, 0x24, 0xa3);
		
		/// <summary>
		/// DomainRole Feature
		/// Description for Ufba.vShome.FeatureReferencesSensor.Feature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesSensor/Feature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesSensor/Feature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Sensor", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesSensor/Feature.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f72fdf3b-2f74-4a7a-a3d2-54eea73224a3")]
		public virtual Feature Feature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Feature)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access hasSensor of a Device
		/// <summary>
		/// Gets a list of hasSensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Feature> GethasSensor(Device element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(element, DeviceDomainRoleId);
		}
		#endregion
		#region Device domain role code
		
		/// <summary>
		/// Device domain role Id.
		/// </summary>
		public static readonly global::System.Guid DeviceDomainRoleId = new global::System.Guid(0xf06d47a3, 0x3da4, 0x4b0c, 0xa9, 0x8e, 0x36, 0x11, 0x8d, 0xe0, 0x26, 0x4b);
		
		/// <summary>
		/// DomainRole Device
		/// Description for Ufba.vShome.FeatureReferencesSensor.Device
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesSensor/Device.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesSensor/Device.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "hasSensor", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesSensor/Device.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f06d47a3-3da4-4b0c-a98e-36118de0264b")]
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Device)DslModeling::DomainRoleInfo.GetRolePlayer(this, DeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sensor of a Feature
		/// <summary>
		/// Gets Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Device GetSensor(Feature element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FeatureDomainRoleId) as Device;
		}
		
		/// <summary>
		/// Sets Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSensor(Feature element, Device newDevice)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FeatureDomainRoleId, newDevice);
		}
		#endregion
		#region Feature link accessor
		/// <summary>
		/// Get the FeatureReferencesSensor link to a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.FeatureReferencesSensor GetLinkToSensor (global::Ufba.vShome.Feature featureInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesSensor>(featureInstance, global::Ufba.vShome.FeatureReferencesSensor.FeatureDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Feature not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Device link accessor
		/// <summary>
		/// Get the list of FeatureReferencesSensor links to a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesSensor> GetLinksTohasSensor ( global::Ufba.vShome.Device deviceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesSensor>(deviceInstance, global::Ufba.vShome.FeatureReferencesSensor.DeviceDomainRoleId);
		}
		#endregion
		#region FeatureReferencesSensor instance accessors
		
		/// <summary>
		/// Get any FeatureReferencesSensor links between a given Feature and a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesSensor> GetLinks( global::Ufba.vShome.Feature source, global::Ufba.vShome.Device target )
		{
			global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesSensor> outLinks = new global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesSensor>();
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesSensor>(source, global::Ufba.vShome.FeatureReferencesSensor.FeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesSensor link in links )
			{
				if ( target.Equals(link.Device) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureReferencesSensor link between a given Featureand a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.FeatureReferencesSensor GetLink( global::Ufba.vShome.Feature source, global::Ufba.vShome.Device target )
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesSensor>(source, global::Ufba.vShome.FeatureReferencesSensor.FeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesSensor link in links )
			{
				if ( target.Equals(link.Device) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.vShome
{
	/// <summary>
	/// DomainRelationship FeatureReferencesBrother
	/// Description for Ufba.vShome.FeatureReferencesBrother
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesBrother.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesBrother.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("29f7432e-0b57-402d-99d8-bd274b334ba2")]
	public partial class FeatureReferencesBrother : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureReferencesBrother domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x29f7432e, 0x0b57, 0x402d, 0x99, 0xd8, 0xbd, 0x27, 0x4b, 0x33, 0x4b, 0xa2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureReferencesBrother link in the same Partition as the given Feature
		/// </summary>
		/// <param name="source">Feature to use as the source of the relationship.</param>
		/// <param name="target">Feature to use as the target of the relationship.</param>
		public FeatureReferencesBrother(Feature source, Feature target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureReferencesBrother.SourceFeatureDomainRoleId, source), new DslModeling::RoleAssignment(FeatureReferencesBrother.TargetFeatureDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesBrother(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesBrother(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesBrother(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesBrother(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceFeature domain role code
		
		/// <summary>
		/// SourceFeature domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceFeatureDomainRoleId = new global::System.Guid(0x2fff0350, 0x3793, 0x4d8e, 0x85, 0x8b, 0x88, 0xac, 0x27, 0x08, 0x6f, 0x35);
		
		/// <summary>
		/// DomainRole SourceFeature
		/// Description for Ufba.vShome.FeatureReferencesBrother.SourceFeature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesBrother/SourceFeature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesBrother/SourceFeature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Brother", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesBrother/SourceFeature.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2fff0350-3793-4d8e-858b-88ac27086f35")]
		public virtual Feature SourceFeature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Feature)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceFeatureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceFeatureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access hasBrother of a Feature
		/// <summary>
		/// Gets a list of hasBrother.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Feature> GethasBrother(Feature element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(element, TargetFeatureDomainRoleId);
		}
		#endregion
		#region TargetFeature domain role code
		
		/// <summary>
		/// TargetFeature domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetFeatureDomainRoleId = new global::System.Guid(0xbc5d4f02, 0x69c1, 0x4845, 0x90, 0xc5, 0xd5, 0xac, 0xbb, 0x3f, 0x76, 0x68);
		
		/// <summary>
		/// DomainRole TargetFeature
		/// Description for Ufba.vShome.FeatureReferencesBrother.TargetFeature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesBrother/TargetFeature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesBrother/TargetFeature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "hasBrother", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesBrother/TargetFeature.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bc5d4f02-69c1-4845-90c5-d5acbb3f7668")]
		public virtual Feature TargetFeature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Feature)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetFeatureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetFeatureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Brother of a Feature
		/// <summary>
		/// Gets Brother.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Feature GetBrother(Feature element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceFeatureDomainRoleId) as Feature;
		}
		
		/// <summary>
		/// Sets Brother.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBrother(Feature element, Feature newTargetFeature)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceFeatureDomainRoleId, newTargetFeature);
		}
		#endregion
		#region SourceFeature link accessor
		/// <summary>
		/// Get the FeatureReferencesBrother link to a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.FeatureReferencesBrother GetLinkToBrother (global::Ufba.vShome.Feature sourceFeatureInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesBrother> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesBrother>(sourceFeatureInstance, global::Ufba.vShome.FeatureReferencesBrother.SourceFeatureDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceFeature not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetFeature link accessor
		/// <summary>
		/// Get the list of FeatureReferencesBrother links to a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesBrother> GetLinksTohasBrother ( global::Ufba.vShome.Feature targetFeatureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesBrother>(targetFeatureInstance, global::Ufba.vShome.FeatureReferencesBrother.TargetFeatureDomainRoleId);
		}
		#endregion
		#region FeatureReferencesBrother instance accessors
		
		/// <summary>
		/// Get any FeatureReferencesBrother links between a given Feature and a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesBrother> GetLinks( global::Ufba.vShome.Feature source, global::Ufba.vShome.Feature target )
		{
			global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesBrother> outLinks = new global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesBrother>();
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesBrother> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesBrother>(source, global::Ufba.vShome.FeatureReferencesBrother.SourceFeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesBrother link in links )
			{
				if ( target.Equals(link.TargetFeature) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureReferencesBrother link between a given Featureand a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.FeatureReferencesBrother GetLink( global::Ufba.vShome.Feature source, global::Ufba.vShome.Feature target )
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesBrother> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesBrother>(source, global::Ufba.vShome.FeatureReferencesBrother.SourceFeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesBrother link in links )
			{
				if ( target.Equals(link.TargetFeature) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.vShome
{
	/// <summary>
	/// DomainRelationship FeatureReferencesAlternatives
	/// Description for Ufba.vShome.FeatureReferencesAlternatives
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesAlternatives.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesAlternatives.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8596ea2b-e8b3-488a-a5e9-0d0d18db6275")]
	public partial class FeatureReferencesAlternatives : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureReferencesAlternatives domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8596ea2b, 0xe8b3, 0x488a, 0xa5, 0xe9, 0x0d, 0x0d, 0x18, 0xdb, 0x62, 0x75);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureReferencesAlternatives link in the same Partition as the given Feature
		/// </summary>
		/// <param name="source">Feature to use as the source of the relationship.</param>
		/// <param name="target">Feature to use as the target of the relationship.</param>
		public FeatureReferencesAlternatives(Feature source, Feature target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureReferencesAlternatives.SourceFeatureDomainRoleId, source), new DslModeling::RoleAssignment(FeatureReferencesAlternatives.TargetFeatureDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesAlternatives(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesAlternatives(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureReferencesAlternatives(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureReferencesAlternatives(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceFeature domain role code
		
		/// <summary>
		/// SourceFeature domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceFeatureDomainRoleId = new global::System.Guid(0x817301ad, 0xad67, 0x4bec, 0x98, 0xa7, 0x91, 0x49, 0x69, 0x65, 0xf4, 0x37);
		
		/// <summary>
		/// DomainRole SourceFeature
		/// Description for Ufba.vShome.FeatureReferencesAlternatives.SourceFeature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesAlternatives/SourceFeature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesAlternatives/SourceFeature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Alternatives", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesAlternatives/SourceFeature.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("817301ad-ad67-4bec-98a7-91496965f437")]
		public virtual Feature SourceFeature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Feature)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceFeatureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceFeatureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceFeatures of a Feature
		/// <summary>
		/// Gets a list of SourceFeatures.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Feature> GetSourceFeatures(Feature element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(element, TargetFeatureDomainRoleId);
		}
		#endregion
		#region TargetFeature domain role code
		
		/// <summary>
		/// TargetFeature domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetFeatureDomainRoleId = new global::System.Guid(0xd5834026, 0x3a69, 0x4ad3, 0xac, 0x5a, 0xc3, 0x5b, 0x97, 0xca, 0xd4, 0x16);
		
		/// <summary>
		/// DomainRole TargetFeature
		/// Description for Ufba.vShome.FeatureReferencesAlternatives.TargetFeature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.FeatureReferencesAlternatives/TargetFeature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.FeatureReferencesAlternatives/TargetFeature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceFeatures", PropertyDisplayNameKey="Ufba.vShome.FeatureReferencesAlternatives/TargetFeature.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d5834026-3a69-4ad3-ac5a-c35b97cad416")]
		public virtual Feature TargetFeature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Feature)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetFeatureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetFeatureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Alternatives of a Feature
		/// <summary>
		/// Gets a list of Alternatives.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Feature> GetAlternatives(Feature element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(element, SourceFeatureDomainRoleId);
		}
		#endregion
		#region SourceFeature link accessor
		/// <summary>
		/// Get the list of FeatureReferencesAlternatives links to a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesAlternatives> GetLinksToAlternatives ( global::Ufba.vShome.Feature sourceFeatureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesAlternatives>(sourceFeatureInstance, global::Ufba.vShome.FeatureReferencesAlternatives.SourceFeatureDomainRoleId);
		}
		#endregion
		#region TargetFeature link accessor
		/// <summary>
		/// Get the list of FeatureReferencesAlternatives links to a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesAlternatives> GetLinksToSourceFeatures ( global::Ufba.vShome.Feature targetFeatureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesAlternatives>(targetFeatureInstance, global::Ufba.vShome.FeatureReferencesAlternatives.TargetFeatureDomainRoleId);
		}
		#endregion
		#region FeatureReferencesAlternatives instance accessors
		
		/// <summary>
		/// Get any FeatureReferencesAlternatives links between a given Feature and a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.vShome.FeatureReferencesAlternatives> GetLinks( global::Ufba.vShome.Feature source, global::Ufba.vShome.Feature target )
		{
			global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesAlternatives> outLinks = new global::System.Collections.Generic.List<global::Ufba.vShome.FeatureReferencesAlternatives>();
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesAlternatives> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesAlternatives>(source, global::Ufba.vShome.FeatureReferencesAlternatives.SourceFeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesAlternatives link in links )
			{
				if ( target.Equals(link.TargetFeature) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureReferencesAlternatives link between a given Featureand a Feature.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.vShome.FeatureReferencesAlternatives GetLink( global::Ufba.vShome.Feature source, global::Ufba.vShome.Feature target )
		{
			global::System.Collections.Generic.IList<global::Ufba.vShome.FeatureReferencesAlternatives> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.vShome.FeatureReferencesAlternatives>(source, global::Ufba.vShome.FeatureReferencesAlternatives.SourceFeatureDomainRoleId);
			foreach ( global::Ufba.vShome.FeatureReferencesAlternatives link in links )
			{
				if ( target.Equals(link.TargetFeature) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
