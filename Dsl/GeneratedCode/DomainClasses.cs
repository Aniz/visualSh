//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ufba.vShome
{
	/// <summary>
	/// DomainClass ModelRoot
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.ModelRoot.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.ModelRoot.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1d5f9f29-8fe8-41d7-824a-0be9dfd874ff")]
	public partial class ModelRoot : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d5f9f29, 0x8fe8, 0x41d7, 0x82, 0x4a, 0x0b, 0xe9, 0xdf, 0xd8, 0x74, 0xff);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x62cdbad2, 0x11f3, 0x425c, 0xa5, 0x3f, 0x6d, 0x57, 0xa2, 0x94, 0xaf, 0x0b);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Ufba.vShome.ModelRoot.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.ModelRoot/Name.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.ModelRoot/Name.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("62cdbad2-11f3-425c-a53f-6d57a294af0b")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Port domain property code
		
		/// <summary>
		/// Port domain property Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainPropertyId = new global::System.Guid(0x5083d313, 0xc1a5, 0x48b9, 0x9a, 0xf9, 0xe4, 0x3b, 0x6b, 0xcd, 0x56, 0x71);
		
		/// <summary>
		/// Storage for Port
		/// </summary>
		private global::System.String portPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Port domain property.
		/// Description for Ufba.vShome.ModelRoot.Port
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.ModelRoot/Port.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.ModelRoot/Port.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5083d313-c1a5-48b9-9af9-e43b6bcd5671")]
		public global::System.String Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return portPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PortPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.Port domain property.
		/// </summary>
		internal sealed partial class PortPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private PortPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.Port domain property value handler.
			/// </summary>
			public static readonly PortPropertyHandler Instance = new PortPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.Port domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PortDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.portPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.portPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Ufba.vShome.ModelRootHasComments.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Features opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Features.
		/// Description for Ufba.vShome.ModelRootHasFeatures.ModelRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Feature> Features
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(global::Ufba.vShome.ModelRootHasFeatures.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Devices opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Devices.
		/// Description for Ufba.vShome.ModelRootHasDevices.ModelRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Device> Devices
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Device>, Device>(global::Ufba.vShome.ModelRootHasDevices.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.vShome.Comment.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.vShome.Feature.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.vShome.Device.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ufba.vShome.Comment sourceComment1 = sourceElement as global::Ufba.vShome.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path ModelRootHasComments.Comments
				this.Comments.Add(sourceComment1);

				return;
			}
				
			global::Ufba.vShome.Feature sourceFeature2 = sourceElement as global::Ufba.vShome.Feature;
			if (sourceFeature2 != null)
			{
				// Create link for path ModelRootHasFeatures.Features
				this.Features.Add(sourceFeature2);

				return;
			}
				
			global::Ufba.vShome.Device sourceDevice3 = sourceElement as global::Ufba.vShome.Device;
			if (sourceDevice3 != null)
			{
				// Create link for path ModelRootHasDevices.Devices
				this.Devices.Add(sourceDevice3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ufba.vShome.Comment sourceComment1 = sourceElement as global::Ufba.vShome.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path ModelRootHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::Ufba.vShome.ModelRootHasComments.GetLinks((global::Ufba.vShome.ModelRoot)this, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.vShome.ModelRootHasComments.ModelRootDomainRoleId, global::Ufba.vShome.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
				
			global::Ufba.vShome.Feature sourceFeature2 = sourceElement as global::Ufba.vShome.Feature;
			if (sourceFeature2 != null)
			{
				// Delete link for path ModelRootHasFeatures.Features
				
				foreach (DslModeling::ElementLink link in global::Ufba.vShome.ModelRootHasFeatures.GetLinks((global::Ufba.vShome.ModelRoot)this, sourceFeature2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.vShome.ModelRootHasFeatures.ModelRootDomainRoleId, global::Ufba.vShome.ModelRootHasFeatures.FeatureDomainRoleId);
				}

				return;
			}
				
			global::Ufba.vShome.Device sourceDevice3 = sourceElement as global::Ufba.vShome.Device;
			if (sourceDevice3 != null)
			{
				// Delete link for path ModelRootHasDevices.Devices
				
				foreach (DslModeling::ElementLink link in global::Ufba.vShome.ModelRootHasDevices.GetLinks((global::Ufba.vShome.ModelRoot)this, sourceDevice3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.vShome.ModelRootHasDevices.ModelRootDomainRoleId, global::Ufba.vShome.ModelRootHasDevices.DeviceDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ufba.vShome
{
	/// <summary>
	/// DomainClass Feature
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.Feature.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.Feature.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3cf5d643-fb66-4ec8-99f2-868528b4b104")]
	public partial class Feature : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Feature domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3cf5d643, 0xfb66, 0x4ec8, 0x99, 0xf2, 0x86, 0x85, 0x28, 0xb4, 0xb1, 0x04);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Feature(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Feature(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FeatureType domain property code
		
		/// <summary>
		/// FeatureType domain property Id.
		/// </summary>
		public static readonly global::System.Guid FeatureTypeDomainPropertyId = new global::System.Guid(0x39c1dc69, 0x86e3, 0x439f, 0x96, 0x0e, 0xd7, 0xc0, 0xb1, 0xea, 0x58, 0x05);
		
		/// <summary>
		/// Storage for FeatureType
		/// </summary>
		private FeatureType featureTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of FeatureType domain property.
		/// Description for Ufba.vShome.Feature.Feature Type
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.Feature/FeatureType.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.Feature/FeatureType.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("39c1dc69-86e3-439f-960e-d7c0b1ea5805")]
		public FeatureType FeatureType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return featureTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FeatureTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Feature.FeatureType domain property.
		/// </summary>
		internal sealed partial class FeatureTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Feature, FeatureType>
		{
			private FeatureTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Feature.FeatureType domain property value handler.
			/// </summary>
			public static readonly FeatureTypePropertyHandler Instance = new FeatureTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Feature.FeatureType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FeatureTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed FeatureType GetValue(Feature element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.featureTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Feature element, FeatureType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				FeatureType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.featureTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Serial domain property code
		
		/// <summary>
		/// Serial domain property Id.
		/// </summary>
		public static readonly global::System.Guid SerialDomainPropertyId = new global::System.Guid(0xc42383dd, 0x847a, 0x4efa, 0x80, 0x33, 0x42, 0x64, 0xff, 0x59, 0xb8, 0xda);
		
		/// <summary>
		/// Storage for Serial
		/// </summary>
		private global::System.String serialPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Serial domain property.
		/// Description for Ufba.vShome.Feature.Serial
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.Feature/Serial.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.Feature/Serial.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c42383dd-847a-4efa-8033-4264ff59b8da")]
		public global::System.String Serial
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return serialPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SerialPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Feature.Serial domain property.
		/// </summary>
		internal sealed partial class SerialPropertyHandler : DslModeling::DomainPropertyValueHandler<Feature, global::System.String>
		{
			private SerialPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Feature.Serial domain property value handler.
			/// </summary>
			public static readonly SerialPropertyHandler Instance = new SerialPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Feature.Serial domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SerialDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Feature element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.serialPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Feature element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.serialPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FeatureName domain property code
		
		/// <summary>
		/// FeatureName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FeatureNameDomainPropertyId = new global::System.Guid(0xd3a66881, 0x5b9a, 0x4f6d, 0x87, 0xd0, 0x0c, 0x73, 0xaa, 0x00, 0xe5, 0x42);
		
		/// <summary>
		/// Storage for FeatureName
		/// </summary>
		private FeatureName featureNamePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of FeatureName domain property.
		/// Description for Ufba.vShome.Feature.Feature Name
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.Feature/FeatureName.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.Feature/FeatureName.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d3a66881-5b9a-4f6d-87d0-0c73aa00e542")]
		public FeatureName FeatureName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return featureNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FeatureNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Feature.FeatureName domain property.
		/// </summary>
		internal sealed partial class FeatureNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Feature, FeatureName>
		{
			private FeatureNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Feature.FeatureName domain property value handler.
			/// </summary>
			public static readonly FeatureNamePropertyHandler Instance = new FeatureNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Feature.FeatureName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FeatureNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed FeatureName GetValue(Feature element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.featureNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Feature element, FeatureName newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				FeatureName oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.featureNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Actuator opposite domain role accessor
		/// <summary>
		/// Gets or sets Actuator.
		/// Description for Ufba.vShome.FeatureReferencesActuator.Feature
		/// </summary>
		public virtual Device Actuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.vShome.FeatureReferencesActuator.FeatureDomainRoleId) as Device;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.vShome.FeatureReferencesActuator.FeatureDomainRoleId, value);
			}
		}
		#endregion
		#region Father opposite domain role accessor
		/// <summary>
		/// Gets or sets Father.
		/// Description for Ufba.vShome.FeatureReferencesFather.SourceFeature
		/// </summary>
		public virtual Feature Father
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.vShome.FeatureReferencesFather.SourceFeatureDomainRoleId) as Feature;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.vShome.FeatureReferencesFather.SourceFeatureDomainRoleId, value);
			}
		}
		#endregion
		#region hasFather opposite domain role accessor
		
		/// <summary>
		/// Gets a list of hasFather.
		/// Description for Ufba.vShome.FeatureReferencesFather.TargetFeature
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Feature> hasFather
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(global::Ufba.vShome.FeatureReferencesFather.TargetFeatureDomainRoleId);
			}
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// Description for Ufba.vShome.ModelRootHasFeatures.Feature
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.vShome.ModelRootHasFeatures.FeatureDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.vShome.ModelRootHasFeatures.FeatureDomainRoleId, value);
			}
		}
		#endregion
		#region Sensor opposite domain role accessor
		/// <summary>
		/// Gets or sets Sensor.
		/// Description for Ufba.vShome.FeatureReferencesSensor.Feature
		/// </summary>
		public virtual Device Sensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.vShome.FeatureReferencesSensor.FeatureDomainRoleId) as Device;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.vShome.FeatureReferencesSensor.FeatureDomainRoleId, value);
			}
		}
		#endregion
		#region Brother opposite domain role accessor
		/// <summary>
		/// Gets or sets Brother.
		/// Description for Ufba.vShome.FeatureReferencesBrother.SourceFeature
		/// </summary>
		public virtual Feature Brother
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.vShome.FeatureReferencesBrother.SourceFeatureDomainRoleId) as Feature;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.vShome.FeatureReferencesBrother.SourceFeatureDomainRoleId, value);
			}
		}
		#endregion
		#region hasBrother opposite domain role accessor
		
		/// <summary>
		/// Gets a list of hasBrother.
		/// Description for Ufba.vShome.FeatureReferencesBrother.TargetFeature
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Feature> hasBrother
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(global::Ufba.vShome.FeatureReferencesBrother.TargetFeatureDomainRoleId);
			}
		}
		#endregion
		#region Alternatives opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Alternatives.
		/// Description for Ufba.vShome.FeatureReferencesAlternatives.SourceFeature
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Feature> Alternatives
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(global::Ufba.vShome.FeatureReferencesAlternatives.SourceFeatureDomainRoleId);
			}
		}
		#endregion
		#region SourceFeatures opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceFeatures.
		/// Description for Ufba.vShome.FeatureReferencesAlternatives.TargetFeature
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Feature> SourceFeatures
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(global::Ufba.vShome.FeatureReferencesAlternatives.TargetFeatureDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for Ufba.vShome.CommentReferencesFeatures.Feature
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Ufba.vShome.CommentReferencesFeatures.FeatureDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Ufba.vShome
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.Comment.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.Comment.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2aa65212-fa5a-4104-8e30-706f532c2271")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2aa65212, 0xfa5a, 0x4104, 0x8e, 0x30, 0x70, 0x6f, 0x53, 0x2c, 0x22, 0x71);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xa083ae06, 0x49a1, 0x4f14, 0x9c, 0x8e, 0x78, 0x4f, 0x0e, 0x67, 0xf6, 0xe4);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.Comment/Text.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.Comment/Text.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("a083ae06-49a1-4f14-9c8e-784f0e67f6e4")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.vShome.ModelRootHasComments.CommentDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.vShome.ModelRootHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Features opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Features.
		/// Description for Ufba.vShome.CommentReferencesFeatures.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Feature> Features
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(global::Ufba.vShome.CommentReferencesFeatures.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Ufba.vShome
{
	/// <summary>
	/// DomainClass Device
	/// Description for Ufba.vShome.Device
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.vShome.Device.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.vShome.Device.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.vShome.vShomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("af1f2194-4417-4e7d-ba28-689526062b9c")]
	public partial class Device : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Device domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaf1f2194, 0x4417, 0x4e7d, 0xba, 0x28, 0x68, 0x95, 0x26, 0x06, 0x2b, 0x9c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xbbaae1ce, 0xeefb, 0x4958, 0xb5, 0xa4, 0x4c, 0x56, 0xdc, 0xe0, 0xb2, 0x81);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Ufba.vShome.Device.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.Device/Name.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.Device/Name.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bbaae1ce-eefb-4958-b5a4-4c56dce0b281")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Device, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReturnType domain property code
		
		/// <summary>
		/// ReturnType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReturnTypeDomainPropertyId = new global::System.Guid(0xb6dbb67f, 0x467c, 0x4a2a, 0x89, 0xbf, 0x66, 0xfc, 0x8b, 0xa5, 0x98, 0xf3);
		
		/// <summary>
		/// Storage for ReturnType
		/// </summary>
		private ReturnType returnTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ReturnType domain property.
		/// Description for Ufba.vShome.Device.Return Type
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.Device/ReturnType.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.Device/ReturnType.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b6dbb67f-467c-4a2a-89bf-66fc8ba598f3")]
		public ReturnType ReturnType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return returnTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReturnTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.ReturnType domain property.
		/// </summary>
		internal sealed partial class ReturnTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Device, ReturnType>
		{
			private ReturnTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.ReturnType domain property value handler.
			/// </summary>
			public static readonly ReturnTypePropertyHandler Instance = new ReturnTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.ReturnType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReturnTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReturnType GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.returnTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, ReturnType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReturnType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.returnTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DeviceType domain property code
		
		/// <summary>
		/// DeviceType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DeviceTypeDomainPropertyId = new global::System.Guid(0xfcff1254, 0xbac3, 0x4ebf, 0xa4, 0x91, 0x28, 0x93, 0x4b, 0x93, 0x41, 0x08);
		
		/// <summary>
		/// Storage for DeviceType
		/// </summary>
		private DeviceType deviceTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DeviceType domain property.
		/// Description for Ufba.vShome.Device.Device Type
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.vShome.Device/DeviceType.DisplayName", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.vShome.Device/DeviceType.Description", typeof(global::Ufba.vShome.vShomeDomainModel), "Ufba.vShome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fcff1254-bac3-4ebf-a491-28934b934108")]
		public DeviceType DeviceType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return deviceTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DeviceTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.DeviceType domain property.
		/// </summary>
		internal sealed partial class DeviceTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Device, DeviceType>
		{
			private DeviceTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.DeviceType domain property value handler.
			/// </summary>
			public static readonly DeviceTypePropertyHandler Instance = new DeviceTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.DeviceType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DeviceTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DeviceType GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.deviceTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, DeviceType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DeviceType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.deviceTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region hasActuator opposite domain role accessor
		
		/// <summary>
		/// Gets a list of hasActuator.
		/// Description for Ufba.vShome.FeatureReferencesActuator.Device
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Feature> hasActuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(global::Ufba.vShome.FeatureReferencesActuator.DeviceDomainRoleId);
			}
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// Description for Ufba.vShome.ModelRootHasDevices.Device
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.vShome.ModelRootHasDevices.DeviceDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.vShome.ModelRootHasDevices.DeviceDomainRoleId, value);
			}
		}
		#endregion
		#region hasSensor opposite domain role accessor
		
		/// <summary>
		/// Gets a list of hasSensor.
		/// Description for Ufba.vShome.FeatureReferencesSensor.Device
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Feature> hasSensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Feature>, Feature>(global::Ufba.vShome.FeatureReferencesSensor.DeviceDomainRoleId);
			}
		}
		#endregion
	}
}
